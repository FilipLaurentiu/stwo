use crate::core::air::definition::{Column, ColumnKind, Component, ComponentInstance, Constraint};
use crate::core::air::graph::{GraphNode, OpParam};

pub fn create_bit_unpacking_component_definition(n_bits: u32) -> Component {
    Component {
        name: "Bit unpacking".to_string(),
        version: "0.1".to_string(),
        description: "Hand written bit unpacking component".to_string(),
        instances: vec![ComponentInstance {
            n_bits,
            generation_graph: vec![
                GraphNode {
                    name: "x".to_string(),
                    description: "x values".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "generation_input".to_string(),
                    params: vec![OpParam::String("values".to_string())],
                    inputs: vec![],
                },
                // one.
                GraphNode {
                    name: "one".to_string(),
                    description: "One value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(1)],
                    inputs: vec![],
                },
                // First bit.
                GraphNode {
                    name: "bit1".to_string(),
                    description: "value & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["x".to_string(), "one".to_string()],
                },
                // First remainder.
                GraphNode {
                    name: "remainder1".to_string(),
                    description: "value // 2 ** 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["x".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit2".to_string(),
                    description: "value // 2 ** 1 & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder1".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder2".to_string(),
                    description: "Value // 2 ** 2".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder1".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit3".to_string(),
                    description: "(value // 2 ** 2) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder2".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder3".to_string(),
                    description: "Value // 2 ** 3".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder2".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit4".to_string(),
                    description: "(value // 2 ** 3) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder3".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder4".to_string(),
                    description: "Value // 2 ** 4".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder3".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit5".to_string(),
                    description: "(value // 2 ** 4) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder4".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder5".to_string(),
                    description: "Value // 2 ** 5".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder4".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit6".to_string(),
                    description: "(value // 2 ** 5) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder5".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder6".to_string(),
                    description: "Value // 2 ** 6".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder5".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit7".to_string(),
                    description: "(value // 2 ** 6) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder6".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder7".to_string(),
                    description: "Value // 2 ** 7".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder6".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit8".to_string(),
                    description: "(value // 2 ** 7) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder7".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder8".to_string(),
                    description: "Value // 2 ** 8".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder7".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit9".to_string(),
                    description: "(value // 2 ** 8) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder8".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder9".to_string(),
                    description: "Value // 2 ** 9".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder8".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit10".to_string(),
                    description: "(value // 2 ** 9) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder9".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder10".to_string(),
                    description: "Value // 2 ** 10".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder9".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit11".to_string(),
                    description: "(value // 2 ** 10) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder10".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder11".to_string(),
                    description: "Value // 2 ** 11".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder10".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit12".to_string(),
                    description: "(value // 2 ** 11) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder11".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder12".to_string(),
                    description: "Value // 2 ** 12".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder11".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit13".to_string(),
                    description: "(value // 2 ** 12) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder12".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder13".to_string(),
                    description: "Value // 2 ** 13".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder12".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit14".to_string(),
                    description: "(value // 2 ** 13) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder13".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder14".to_string(),
                    description: "Value // 2 ** 14".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder13".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit15".to_string(),
                    description: "(value // 2 ** 14) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder14".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder15".to_string(),
                    description: "Value // 2 ** 15".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder14".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit16".to_string(),
                    description: "(value // 2 ** 15) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder15".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder".to_string(),
                    description: "Value // 2 ** 16".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder15".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "unpacked_x".to_string(),
                    description: "Bit representation (small endian) of the input".to_string(),
                    size: 1 << (n_bits + 4),
                    ty: "u64".to_string(),
                    op: "interleave".to_string(),
                    params: vec![],
                    inputs: vec![
                        "bit1".to_string(),
                        "bit2".to_string(),
                        "bit3".to_string(),
                        "bit4".to_string(),
                        "bit5".to_string(),
                        "bit6".to_string(),
                        "bit7".to_string(),
                        "bit8".to_string(),
                        "bit9".to_string(),
                        "bit10".to_string(),
                        "bit11".to_string(),
                        "bit12".to_string(),
                        "bit13".to_string(),
                        "bit14".to_string(),
                        "bit15".to_string(),
                        "bit16".to_string(),
                    ],
                },
            ],
            columns: vec![
                Column {
                    name: "x".to_string(),
                    description: "values".to_string(),
                    generation_node: "x".to_string(),
                    kind: ColumnKind::Witness,
                },
                Column {
                    name: "unpacked_x".to_string(),
                    description: "x values in bit representation (small endian)".to_string(),
                    generation_node: "unpacked_x".to_string(),
                    kind: ColumnKind::Witness,
                },
            ],
            outputs: vec![],
            constraint_graph: vec![
                // Check that the unpacked_x column consists only bits.
                GraphNode {
                    name: "unpacked_x_square".to_string(),
                    description: "unpacked_x square".to_string(),
                    size: 1 << (n_bits + 4),
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["unpacked_x".to_string(), "unpacked_x".to_string()],
                },
                GraphNode {
                    name: "is_bits".to_string(),
                    description: "Check that the unpacked_x column consists only bits".to_string(),
                    size: 1 << (n_bits + 4),
                    ty: "u64".to_string(),
                    op: "sub".to_string(),
                    params: vec![],
                    inputs: vec!["unpacked_x_square".to_string(), "unpacked_x".to_string()],
                },
                // sum bits.
                // n_bits constants.
                GraphNode {
                    name: "two".to_string(),
                    description: "Two value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(2)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "three".to_string(),
                    description: "Three value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(3)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "four".to_string(),
                    description: "Four value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(4)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "five".to_string(),
                    description: "Five value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(5)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "six".to_string(),
                    description: "Six value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(6)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "seven".to_string(),
                    description: "Seven value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(7)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "eight".to_string(),
                    description: "Eight value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(8)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "nine".to_string(),
                    description: "Nine value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(9)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "ten".to_string(),
                    description: "Ten value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(10)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "eleven".to_string(),
                    description: "Eleven value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(11)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "twelve".to_string(),
                    description: "Twelve value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(12)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "thirteen".to_string(),
                    description: "Thirteen value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(13)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "fourteen".to_string(),
                    description: "Fourteen value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(14)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "fifteen".to_string(),
                    description: "Fifteen value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(15)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "sixteen".to_string(),
                    description: "Sixteen value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(16)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "shifted_bit2".to_string(),
                    description: "bit2 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit2".to_string(), "two".to_string()],
                },
                GraphNode {
                    name: "shifted_bit3".to_string(),
                    description: "bit3 << 2".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit3".to_string(), "three".to_string()],
                },
                GraphNode {
                    name: "shifted_bit4".to_string(),
                    description: "bit4 << 3".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit4".to_string(), "four".to_string()],
                },
                GraphNode {
                    name: "shifted_bit5".to_string(),
                    description: "bit5 << 4".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit5".to_string(), "five".to_string()],
                },
                GraphNode {
                    name: "shifted_bit6".to_string(),
                    description: "bit6 << 5".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit6".to_string(), "six".to_string()],
                },
                GraphNode {
                    name: "shifted_bit7".to_string(),
                    description: "bit7 << 6".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit7".to_string(), "seven".to_string()],
                },
                GraphNode {
                    name: "shifted_bit8".to_string(),
                    description: "bit8 << 7".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit8".to_string(), "eight".to_string()],
                },
                GraphNode {
                    name: "shifted_bit9".to_string(),
                    description: "bit9 << 8".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit9".to_string(), "nine".to_string()],
                },
                GraphNode {
                    name: "shifted_bit10".to_string(),
                    description: "bit10 << 9".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit10".to_string(), "ten".to_string()],
                },
                GraphNode {
                    name: "shifted_bit11".to_string(),
                    description: "bit11 << 10".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit11".to_string(), "eleven".to_string()],
                },
                GraphNode {
                    name: "shifted_bit12".to_string(),
                    description: "bit12 << 11".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit12".to_string(), "twelve".to_string()],
                },
                GraphNode {
                    name: "shifted_bit13".to_string(),
                    description: "bit13 << 12".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit13".to_string(), "thirteen".to_string()],
                },
                GraphNode {
                    name: "shifted_bit14".to_string(),
                    description: "bit14 << 13".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit14".to_string(), "fourteen".to_string()],
                },
                GraphNode {
                    name: "shifted_bit15".to_string(),
                    description: "bit15 << 14".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit15".to_string(), "fifteen".to_string()],
                },
                GraphNode {
                    name: "shifted_bit16".to_string(),
                    description: "bit16 << 15".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shl".to_string(),
                    params: vec![],
                    inputs: vec!["bit16".to_string(), "sixteen".to_string()],
                },
                GraphNode {
                    name: "sum_shifted_bits2".to_string(),
                    description: "Partial sum of the two shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["shifted_bit2".to_string(), "bit1".to_string()],
                },
                GraphNode {
                    name: "sum_shifted_bits3".to_string(),
                    description: "partial sum of the three first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["sum_shifted_bits2".to_string(), "shifted_bit3".to_string()],
                },
                GraphNode {
                    name: "sum_shifted_bits4".to_string(),
                    description: "partial sum of the four first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["sum_shifted_bits3".to_string(), "shifted_bit4".to_string()],
                },
                GraphNode {
                    name: "sum_shifted_bits5".to_string(),
                    description: "partial sum of the five first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["sum_shifted_bits4".to_string(), "shifted_bit5".to_string()],
                },
                GraphNode {
                    name: "sum_shifted_bits6".to_string(),
                    description: "partial sum of the six first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["sum_shifted_bits5".to_string(), "shifted_bit6".to_string()],
                },
                GraphNode {
                    name: "sum_shifted_bits7".to_string(),
                    description: "partial sum of the seven first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["sum_shifted_bits6".to_string(), "shifted_bit7".to_string()],
                },
                GraphNode {
                    name: "sum_shifted_bits8".to_string(),
                    description: "partial sum of the eight first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["sum_shifted_bits7".to_string(), "shifted_bit8".to_string()],
                },
                GraphNode {
                    name: "sum_shifted_bits9".to_string(),
                    description: "partial sum of the nine first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["sum_shifted_bits8".to_string(), "shifted_bit9".to_string()],
                },
                GraphNode {
                    name: "sum_shifted_bits10".to_string(),
                    description: "partial sum of the ten first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["sum_shifted_bits9".to_string(), "shifted_bit10".to_string()],
                },
                GraphNode {
                    name: "sum_shifted_bits11".to_string(),
                    description: "partial sum of the eleven first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec![
                        "sum_shifted_bits10".to_string(),
                        "shifted_bit11".to_string(),
                    ],
                },
                GraphNode {
                    name: "sum_shifted_bits12".to_string(),
                    description: "partial sum of the twelve first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec![
                        "sum_shifted_bits11".to_string(),
                        "shifted_bit12".to_string(),
                    ],
                },
                GraphNode {
                    name: "sum_shifted_bits13".to_string(),
                    description: "partial sum of the thirteen first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec![
                        "sum_shifted_bits12".to_string(),
                        "shifted_bit13".to_string(),
                    ],
                },
                GraphNode {
                    name: "sum_shifted_bits14".to_string(),
                    description: "partial sum of the fourteen first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec![
                        "sum_shifted_bits13".to_string(),
                        "shifted_bit14".to_string(),
                    ],
                },
                GraphNode {
                    name: "sum_shifted_bits15".to_string(),
                    description: "partial sum of the fifteen first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec![
                        "sum_shifted_bits14".to_string(),
                        "shifted_bit15".to_string(),
                    ],
                },
                GraphNode {
                    name: "total_sum".to_string(),
                    description: "partial sum of the sixteen first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec![
                        "sum_shifted_bits15".to_string(),
                        "shifted_bit16".to_string(),
                    ],
                },
                GraphNode {
                    name: "unpacked_x_eq_x".to_string(),
                    description: "unpacked_x is the bit representation of x (low endian)"
                        .to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "sub".to_string(),
                    params: vec![],
                    inputs: vec!["total_sum".to_string(), "x".to_string()],
                },
            ],
            constraints: vec![
                Constraint {
                    name: "is_bits".to_string(),
                    description: "Check that the unpacked_x column consists only bits".to_string(),
                    constraint_node: "is_bits".to_string(),
                },
                Constraint {
                    name: "bit_representation".to_string(),
                    description: "Check that unpacked_x is indeed the bit representation of x"
                        .to_string(),
                    constraint_node: "unpacked_x_eq_x".to_string(),
                },
            ],
            interaction_elements: vec![],
        }],
    }
}

#[test]
fn test_component_file() {
    let component = create_bit_unpacking_component_definition(4);
    let json = serde_json::to_string_pretty(&component).unwrap() + "\n";

    // Compute the path to a nearby file.
    // Use the cargo environment variable to get the correct path to the source directory.
    let mut path = std::path::PathBuf::from(std::env::var("CARGO_MANIFEST_DIR").unwrap());
    path.push("src/examples/bit_unpacking_component.json");

    // Compare against the local file fibonacci_component.json.
    let expected_json = std::fs::read_to_string(path.clone()).unwrap();
    if json != expected_json {
        // Fix the component file if the FIX_TESTS environment variable is set.
        if std::env::var("FIX_TESTS").is_ok() {
            std::fs::write(path, json).unwrap();
        } else {
            panic!("Fibonacci component file is not up to date. Run with FIX_TESTS=1 to fix.");
        }
    }
}
