use crate::core::air::definition::{Column, ColumnKind, Component, ComponentInstance, Constraint};
use crate::core::air::graph::{GraphNode, OpParam};

pub fn create_bit_unpacking_component_definition(n_bits: u32) -> Component {
    Component {
        name: "Bit unpacking".to_string(),
        version: "0.1".to_string(),
        description: "Hand written bit unpacking component".to_string(),
        instances: vec![ComponentInstance {
            n_bits,
            generation_graph: vec![
                GraphNode {
                    name: "x".to_string(),
                    description: "x values".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "generation_input".to_string(),
                    params: vec![OpParam::String("values".to_string())],
                    inputs: vec![],
                },
                // one.
                GraphNode {
                    name: "one".to_string(),
                    description: "One value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(1)],
                    inputs: vec![],
                },
                // First bit.
                GraphNode {
                    name: "bit1".to_string(),
                    description: "value & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["x".to_string(), "one".to_string()],
                },
                // First remainder.
                GraphNode {
                    name: "remainder1".to_string(),
                    description: "value // 2 ** 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["x".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit2".to_string(),
                    description: "value // 2 ** 1 & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder1".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder2".to_string(),
                    description: "Value // 2 ** 2".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder1".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit3".to_string(),
                    description: "(value // 2 ** 2) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder2".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder3".to_string(),
                    description: "Value // 2 ** 3".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder2".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit4".to_string(),
                    description: "(value // 2 ** 3) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder3".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder4".to_string(),
                    description: "Value // 2 ** 4".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder3".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit5".to_string(),
                    description: "(value // 2 ** 4) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder4".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder5".to_string(),
                    description: "Value // 2 ** 5".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder4".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit6".to_string(),
                    description: "(value // 2 ** 5) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder5".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder6".to_string(),
                    description: "Value // 2 ** 6".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder5".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit7".to_string(),
                    description: "(value // 2 ** 6) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder6".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder7".to_string(),
                    description: "Value // 2 ** 7".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder6".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit8".to_string(),
                    description: "(value // 2 ** 7) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder7".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder8".to_string(),
                    description: "Value // 2 ** 8".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder7".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit9".to_string(),
                    description: "(value // 2 ** 8) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder8".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder9".to_string(),
                    description: "Value // 2 ** 9".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder8".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit10".to_string(),
                    description: "(value // 2 ** 9) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder9".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder10".to_string(),
                    description: "Value // 2 ** 10".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder9".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit11".to_string(),
                    description: "(value // 2 ** 10) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder10".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder11".to_string(),
                    description: "Value // 2 ** 11".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder10".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit12".to_string(),
                    description: "(value // 2 ** 11) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder11".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder12".to_string(),
                    description: "Value // 2 ** 12".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder11".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit13".to_string(),
                    description: "(value // 2 ** 12) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder12".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder13".to_string(),
                    description: "Value // 2 ** 13".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder12".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit14".to_string(),
                    description: "(value // 2 ** 13) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder13".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder14".to_string(),
                    description: "Value // 2 ** 14".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder13".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit15".to_string(),
                    description: "(value // 2 ** 14) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder14".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder15".to_string(),
                    description: "Value // 2 ** 15".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder14".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "bit16".to_string(),
                    description: "(value // 2 ** 15) & 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "and".to_string(),
                    params: vec![],
                    inputs: vec!["remainder15".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "remainder".to_string(),
                    description: "Value // 2 ** 16".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "shr".to_string(),
                    params: vec![],
                    inputs: vec!["remainder15".to_string(), "one".to_string()],
                },
                GraphNode {
                    name: "unpacked_x".to_string(),
                    description: "Bit representation (small endian) of the input".to_string(),
                    size: 1 << (n_bits + 4),
                    ty: "u64".to_string(),
                    op: "interleave".to_string(),
                    params: vec![],
                    inputs: vec![
                        "bit1".to_string(),
                        "bit2".to_string(),
                        "bit3".to_string(),
                        "bit4".to_string(),
                        "bit5".to_string(),
                        "bit6".to_string(),
                        "bit7".to_string(),
                        "bit8".to_string(),
                        "bit9".to_string(),
                        "bit10".to_string(),
                        "bit11".to_string(),
                        "bit12".to_string(),
                        "bit13".to_string(),
                        "bit14".to_string(),
                        "bit15".to_string(),
                        "bit16".to_string(),
                    ],
                },
            ],
            columns: vec![
                Column {
                    name: "x".to_string(),
                    description: "values".to_string(),
                    generation_node: "x".to_string(),
                    kind: ColumnKind::Witness,
                },
                Column {
                    name: "unpacked_x".to_string(),
                    description: "x values in bit representation (small endian)".to_string(),
                    generation_node: "unpacked_x".to_string(),
                    kind: ColumnKind::Witness,
                },
            ],
            outputs: vec![],
            constraint_graph: vec![
                // Check that the unpacked_x column consists only bits.
                GraphNode {
                    name: "unpacked_x_square".to_string(),
                    description: "unpacked_x square".to_string(),
                    size: 1 << (n_bits + 4),
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["unpacked_x".to_string(), "unpacked_x".to_string()],
                },
                GraphNode {
                    name: "is_bits".to_string(),
                    description: "Check that the unpacked_x column consists only bits".to_string(),
                    size: 1 << (n_bits + 4),
                    ty: "u64".to_string(),
                    op: "sub".to_string(),
                    params: vec![],
                    inputs: vec!["unpacked_x_square".to_string(), "unpacked_x".to_string()],
                },
                GraphNode {
                    name: "two".to_string(),
                    description: "Two value".to_string(),
                    size: 1,
                    ty: "u64".to_string(),
                    op: "constant".to_string(),
                    params: vec![OpParam::Int(2)],
                    inputs: vec![],
                },
                GraphNode {
                    name: "multiple_twos".to_string(),
                    description: "[2; n_bits]".to_string(),
                    size: 1 << n_bits,
                    ty: "QM31".to_string(),
                    op: "repeat".to_string(),
                    params: vec![
                        OpParam::String("two".to_string()),
                        OpParam::Int(1),
                        OpParam::Int(1 << n_bits),
                    ],
                    inputs: vec![],
                },
                // sum
                GraphNode {
                    name: "bit1".to_string(),
                    description: "The first bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(0),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit2".to_string(),
                    description: "The second bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(1),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit3".to_string(),
                    description: "The third bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(3),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit4".to_string(),
                    description: "The four bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(4),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit5".to_string(),
                    description: "The five bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(5),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit6".to_string(),
                    description: "The six bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(6),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit7".to_string(),
                    description: "The seven bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(7),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit8".to_string(),
                    description: "The eight bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(8),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit9".to_string(),
                    description: "The nine bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(9),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit10".to_string(),
                    description: "The ten bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(10),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit11".to_string(),
                    description: "The eleven bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(11),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit12".to_string(),
                    description: "The twelve bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(12),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit13".to_string(),
                    description: "The thirteen bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(13),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit14".to_string(),
                    description: "The fourteen bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(14),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "bit15".to_string(),
                    description: "The fifteen bit of every number".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "slice".to_string(),
                    params: vec![
                        OpParam::Int(15),
                        OpParam::Int(1 << (n_bits + 4)),
                        OpParam::Int(16),
                    ],
                    inputs: vec!["unpacked_x".to_string()],
                },
                GraphNode {
                    name: "partial_sum15_double".to_string(),
                    description: "bit15 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["bit15".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum14".to_string(),
                    description: "partial_sum15_double + bit14".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum15_double".to_string(), "bit14".to_string()],
                },
                GraphNode {
                    name: "partial_sum14_double".to_string(),
                    description: "partial_sum14 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum14".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum13".to_string(),
                    description: "partial_sum14_double + bit13".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum14_double".to_string(), "bit13".to_string()],
                },
                GraphNode {
                    name: "partial_sum13_double".to_string(),
                    description: "partial_sum13 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum13".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum12".to_string(),
                    description: "partial_sum13_double + bit12".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum13_double".to_string(), "bit12".to_string()],
                },
                GraphNode {
                    name: "partial_sum12_double".to_string(),
                    description: "partial_sum12 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum12".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum11".to_string(),
                    description: "partial_sum12_double + bit11".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum12_double".to_string(), "bit11".to_string()],
                },
                GraphNode {
                    name: "partial_sum11_double".to_string(),
                    description: "partial_sum11 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum11".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum10".to_string(),
                    description: "partial_sum11_double + bit10".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum11_double".to_string(), "bit10".to_string()],
                },
                GraphNode {
                    name: "partial_sum10_double".to_string(),
                    description: "partial_sum10 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum10".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum9".to_string(),
                    description: "partial_sum10_double + bit9".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum10_double".to_string(), "bit9".to_string()],
                },
                GraphNode {
                    name: "partial_sum9_double".to_string(),
                    description: "partial_sum9 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum9".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum8".to_string(),
                    description: "partial_sum9_double + bit8".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum9_double".to_string(), "bit8".to_string()],
                },
                GraphNode {
                    name: "partial_sum8_double".to_string(),
                    description: "partial_sum8 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum8".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum7".to_string(),
                    description: "partial_sum8_double + bit7".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum8_double".to_string(), "bit7".to_string()],
                },
                GraphNode {
                    name: "partial_sum7_double".to_string(),
                    description: "partial_sum7 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum7".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum6".to_string(),
                    description: "partial_sum7_double + bit6".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum7_double".to_string(), "bit6".to_string()],
                },
                GraphNode {
                    name: "partial_sum6_double".to_string(),
                    description: "partial_sum6 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum6".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum5".to_string(),
                    description: "partial_sum6_double + bit5".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum6_double".to_string(), "bit5".to_string()],
                },
                GraphNode {
                    name: "partial_sum5_double".to_string(),
                    description: "partial_sum5 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum5".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum4".to_string(),
                    description: "partial_sum5_double + bit4".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum5_double".to_string(), "bit4".to_string()],
                },
                GraphNode {
                    name: "partial_sum4_double".to_string(),
                    description: "partial_sum4 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum4".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum3".to_string(),
                    description: "partial_sum4_double + bit3".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum4_double".to_string(), "bit3".to_string()],
                },
                GraphNode {
                    name: "partial_sum3_double".to_string(),
                    description: "partial_sum3 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum3".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "partial_sum2".to_string(),
                    description: "partial_sum3_double + bit2".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum3_double".to_string(), "bit2".to_string()],
                },
                GraphNode {
                    name: "partial_sum2_double".to_string(),
                    description: "partial_sum2 << 1".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "mul".to_string(),
                    params: vec![],
                    inputs: vec!["partial_sum2".to_string(), "multiple_twos".to_string()],
                },
                GraphNode {
                    name: "total_sum".to_string(),
                    description: "partial sum of the sixteen first shifted bits".to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "add".to_string(),
                    params: vec![],
                    inputs: vec![
                        "partial_sum2_double".to_string(),
                        "bit1".to_string(),
                    ],
                },
                GraphNode {
                    name: "unpacked_x_eq_x".to_string(),
                    description: "unpacked_x is the bit representation of x (low endian)"
                        .to_string(),
                    size: 1 << n_bits,
                    ty: "u64".to_string(),
                    op: "sub".to_string(),
                    params: vec![],
                    inputs: vec!["total_sum".to_string(), "x".to_string()],
                },
            ],
            constraints: vec![
                Constraint {
                    name: "is_bits".to_string(),
                    description: "Check that the unpacked_x column consists only bits".to_string(),
                    constraint_node: "is_bits".to_string(),
                },
                Constraint {
                    name: "bit_representation".to_string(),
                    description: "Check that unpacked_x is indeed the bit representation of x"
                        .to_string(),
                    constraint_node: "unpacked_x_eq_x".to_string(),
                },
            ],
            interaction_elements: vec![],
        }],
    }
}

#[test]
fn test_component_file() {
    let component = create_bit_unpacking_component_definition(4);
    let json = serde_json::to_string_pretty(&component).unwrap() + "\n";

    // Compute the path to a nearby file.
    // Use the cargo environment variable to get the correct path to the source directory.
    let mut path = std::path::PathBuf::from(std::env::var("CARGO_MANIFEST_DIR").unwrap());
    path.push("src/examples/bit_unpacking_component.json");

    // Compare against the local file fibonacci_component.json.
    let expected_json = std::fs::read_to_string(path.clone()).unwrap();
    if json != expected_json {
        // Fix the component file if the FIX_TESTS environment variable is set.
        if std::env::var("FIX_TESTS").is_ok() {
            std::fs::write(path, json).unwrap();
        } else {
            panic!("Fibonacci component file is not up to date. Run with FIX_TESTS=1 to fix.");
        }
    }
}
