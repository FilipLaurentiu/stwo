<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="2309"><g><title>gkr2`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.35%)</title><rect x="0.0000%" y="181" width="0.3465%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8"/><text x="0.2500%" y="191.50"></text></g><g><title>gkr2`&lt;prover_research::core::fields::qm31::QM31 as core::ops::arith::Add&gt;::add (1 samples, 0.04%)</title><rect x="0.3465%" y="181" width="0.0433%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="1"/><text x="0.5965%" y="191.50"></text></g><g><title>gkr2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (122 samples, 5.28%)</title><rect x="0.0000%" y="197" width="5.2837%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="122"/><text x="0.2500%" y="207.50">gkr2`&lt;..</text></g><g><title>gkr2`&lt;prover_research::core::fields::qm31::QM31 as core::ops::arith::Mul&gt;::mul (113 samples, 4.89%)</title><rect x="0.3898%" y="181" width="4.8939%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="113"/><text x="0.6398%" y="191.50">gkr2`&lt;..</text></g><g><title>gkr2`&lt;gkr2::utils::Fraction&lt;F&gt; as core::iter::traits::accum::Sum&lt;&amp;gkr2::utils::Fraction&lt;F&gt;&gt;&gt;::sum (2 samples, 0.09%)</title><rect x="5.2837%" y="197" width="0.0866%" height="15" fill="rgb(208,68,35)" fg:x="122" fg:w="2"/><text x="5.5337%" y="207.50"></text></g><g><title>gkr2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.09%)</title><rect x="6.2365%" y="165" width="0.0866%" height="15" fill="rgb(232,128,0)" fg:x="144" fg:w="2"/><text x="6.4865%" y="175.50"></text></g><g><title>gkr2`DYLD-STUB$$free (7 samples, 0.30%)</title><rect x="6.3231%" y="165" width="0.3032%" height="15" fill="rgb(207,160,47)" fg:x="146" fg:w="7"/><text x="6.5731%" y="175.50"></text></g><g><title>gkr2`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.09%)</title><rect x="6.6262%" y="165" width="0.0866%" height="15" fill="rgb(228,23,34)" fg:x="153" fg:w="2"/><text x="6.8762%" y="175.50"></text></g><g><title>gkr2`alloc::raw_vec::finish_grow (2 samples, 0.09%)</title><rect x="6.6262%" y="149" width="0.0866%" height="15" fill="rgb(218,30,26)" fg:x="153" fg:w="2"/><text x="6.8762%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.09%)</title><rect x="6.6262%" y="133" width="0.0866%" height="15" fill="rgb(220,122,19)" fg:x="153" fg:w="2"/><text x="6.8762%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.09%)</title><rect x="6.6262%" y="117" width="0.0866%" height="15" fill="rgb(250,228,42)" fg:x="153" fg:w="2"/><text x="6.8762%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.09%)</title><rect x="6.6262%" y="101" width="0.0866%" height="15" fill="rgb(240,193,28)" fg:x="153" fg:w="2"/><text x="6.8762%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (2 samples, 0.09%)</title><rect x="6.6262%" y="85" width="0.0866%" height="15" fill="rgb(216,20,37)" fg:x="153" fg:w="2"/><text x="6.8762%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (2 samples, 0.09%)</title><rect x="6.6262%" y="69" width="0.0866%" height="15" fill="rgb(206,188,39)" fg:x="153" fg:w="2"/><text x="6.8762%" y="79.50"></text></g><g><title>gkr2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.82%)</title><rect x="6.8428%" y="149" width="0.8229%" height="15" fill="rgb(217,207,13)" fg:x="158" fg:w="19"/><text x="7.0928%" y="159.50"></text></g><g><title>gkr2`DYLD-STUB$$memcpy (1 samples, 0.04%)</title><rect x="8.1854%" y="133" width="0.0433%" height="15" fill="rgb(231,73,38)" fg:x="189" fg:w="1"/><text x="8.4354%" y="143.50"></text></g><g><title>gkr2`DYLD-STUB$$realloc (1 samples, 0.04%)</title><rect x="8.2287%" y="117" width="0.0433%" height="15" fill="rgb(225,20,46)" fg:x="190" fg:w="1"/><text x="8.4787%" y="127.50"></text></g><g><title>gkr2`__rdl_realloc (1 samples, 0.04%)</title><rect x="8.2720%" y="117" width="0.0433%" height="15" fill="rgb(210,31,41)" fg:x="191" fg:w="1"/><text x="8.5220%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.04%)</title><rect x="8.3586%" y="101" width="0.0433%" height="15" fill="rgb(221,200,47)" fg:x="193" fg:w="1"/><text x="8.6086%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.04%)</title><rect x="9.1382%" y="69" width="0.0433%" height="15" fill="rgb(226,26,5)" fg:x="211" fg:w="1"/><text x="9.3882%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.09%)</title><rect x="9.1815%" y="69" width="0.0866%" height="15" fill="rgb(249,33,26)" fg:x="212" fg:w="2"/><text x="9.4315%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.56%)</title><rect x="9.2681%" y="69" width="0.5630%" height="15" fill="rgb(235,183,28)" fg:x="214" fg:w="13"/><text x="9.5181%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (11 samples, 0.48%)</title><rect x="9.8311%" y="69" width="0.4764%" height="15" fill="rgb(221,5,38)" fg:x="227" fg:w="11"/><text x="10.0811%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.04%)</title><rect x="10.4374%" y="53" width="0.0433%" height="15" fill="rgb(247,18,42)" fg:x="241" fg:w="1"/><text x="10.6874%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.30%)</title><rect x="10.4807%" y="53" width="0.3032%" height="15" fill="rgb(241,131,45)" fg:x="242" fg:w="7"/><text x="10.7307%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (12 samples, 0.52%)</title><rect x="10.3075%" y="69" width="0.5197%" height="15" fill="rgb(249,31,29)" fg:x="238" fg:w="12"/><text x="10.5575%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.04%)</title><rect x="10.7839%" y="53" width="0.0433%" height="15" fill="rgb(225,111,53)" fg:x="249" fg:w="1"/><text x="11.0339%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (50 samples, 2.17%)</title><rect x="8.8350%" y="85" width="2.1654%" height="15" fill="rgb(238,160,17)" fg:x="204" fg:w="50"/><text x="9.0850%" y="95.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.17%)</title><rect x="10.8272%" y="69" width="0.1732%" height="15" fill="rgb(214,148,48)" fg:x="250" fg:w="4"/><text x="11.0772%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (2 samples, 0.09%)</title><rect x="11.0004%" y="85" width="0.0866%" height="15" fill="rgb(232,36,49)" fg:x="254" fg:w="2"/><text x="11.2504%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (63 samples, 2.73%)</title><rect x="8.4019%" y="101" width="2.7285%" height="15" fill="rgb(209,103,24)" fg:x="194" fg:w="63"/><text x="8.6519%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.04%)</title><rect x="11.0871%" y="85" width="0.0433%" height="15" fill="rgb(229,88,8)" fg:x="256" fg:w="1"/><text x="11.3371%" y="95.50"></text></g><g><title>gkr2`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (72 samples, 3.12%)</title><rect x="8.2287%" y="133" width="3.1182%" height="15" fill="rgb(213,181,19)" fg:x="190" fg:w="72"/><text x="8.4787%" y="143.50">gkr..</text></g><g><title>gkr2`alloc::raw_vec::finish_grow (70 samples, 3.03%)</title><rect x="8.3153%" y="117" width="3.0316%" height="15" fill="rgb(254,191,54)" fg:x="192" fg:w="70"/><text x="8.5653%" y="127.50">gkr..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (5 samples, 0.22%)</title><rect x="11.1304%" y="101" width="0.2165%" height="15" fill="rgb(241,83,37)" fg:x="257" fg:w="5"/><text x="11.3804%" y="111.50"></text></g><g><title>gkr2`alloc::raw_vec::finish_grow (2 samples, 0.09%)</title><rect x="11.3469%" y="133" width="0.0866%" height="15" fill="rgb(233,36,39)" fg:x="262" fg:w="2"/><text x="11.5969%" y="143.50"></text></g><g><title>gkr2`blake2::Blake2sVarCore::finalize_with_flag (3 samples, 0.13%)</title><rect x="11.4335%" y="133" width="0.1299%" height="15" fill="rgb(226,3,54)" fg:x="264" fg:w="3"/><text x="11.6835%" y="143.50"></text></g><g><title>gkr2`blake2::Blake2sVarCore::new_with_params (6 samples, 0.26%)</title><rect x="11.5634%" y="133" width="0.2599%" height="15" fill="rgb(245,192,40)" fg:x="267" fg:w="6"/><text x="11.8134%" y="143.50"></text></g><g><title>gkr2`blake2::Blake2sVarCore::compress (509 samples, 22.04%)</title><rect x="12.2131%" y="117" width="22.0442%" height="15" fill="rgb(238,167,29)" fg:x="282" fg:w="509"/><text x="12.4631%" y="127.50">gkr2`blake2::Blake2sVarCore::compre..</text></g><g><title>gkr2`blake2::Blake2sVarCore::finalize_with_flag (18 samples, 0.78%)</title><rect x="34.2573%" y="117" width="0.7796%" height="15" fill="rgb(232,182,51)" fg:x="791" fg:w="18"/><text x="34.5073%" y="127.50"></text></g><g><title>gkr2`prover_research::commitment_scheme::hasher::Hasher::hash (540 samples, 23.39%)</title><rect x="11.8233%" y="133" width="23.3867%" height="15" fill="rgb(231,60,39)" fg:x="273" fg:w="540"/><text x="12.0733%" y="143.50">gkr2`prover_research::commitment_sche..</text></g><g><title>gkr2`blake2::Blake2sVarCore::new_with_params (4 samples, 0.17%)</title><rect x="35.0368%" y="117" width="0.1732%" height="15" fill="rgb(208,69,12)" fg:x="809" fg:w="4"/><text x="35.2868%" y="127.50"></text></g><g><title>gkr2`&lt;prover_research::core::channel::Blake2sChannel as prover_research::core::channel::Channel&gt;::draw_random_bytes (639 samples, 27.67%)</title><rect x="7.6657%" y="149" width="27.6743%" height="15" fill="rgb(235,93,37)" fg:x="177" fg:w="639"/><text x="7.9157%" y="159.50">gkr2`&lt;prover_research::core::channel::Blake2..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.13%)</title><rect x="35.2100%" y="133" width="0.1299%" height="15" fill="rgb(213,116,39)" fg:x="813" fg:w="3"/><text x="35.4600%" y="143.50"></text></g><g><title>gkr2`DYLD-STUB$$malloc (1 samples, 0.04%)</title><rect x="35.3400%" y="149" width="0.0433%" height="15" fill="rgb(222,207,29)" fg:x="816" fg:w="1"/><text x="35.5900%" y="159.50"></text></g><g><title>gkr2`__rdl_alloc (3 samples, 0.13%)</title><rect x="35.3833%" y="149" width="0.1299%" height="15" fill="rgb(206,96,30)" fg:x="817" fg:w="3"/><text x="35.6333%" y="159.50"></text></g><g><title>gkr2`prover_research::commitment_scheme::hasher::Hasher::hash (2 samples, 0.09%)</title><rect x="35.5132%" y="149" width="0.0866%" height="15" fill="rgb(218,138,4)" fg:x="820" fg:w="2"/><text x="35.7632%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.26%)</title><rect x="35.5998%" y="149" width="0.2599%" height="15" fill="rgb(250,191,14)" fg:x="822" fg:w="6"/><text x="35.8498%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (22 samples, 0.95%)</title><rect x="35.8597%" y="149" width="0.9528%" height="15" fill="rgb(239,60,40)" fg:x="828" fg:w="22"/><text x="36.1097%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (97 samples, 4.20%)</title><rect x="36.8125%" y="149" width="4.2010%" height="15" fill="rgb(206,27,48)" fg:x="850" fg:w="97"/><text x="37.0625%" y="159.50">libsy..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28 samples, 1.21%)</title><rect x="41.0134%" y="149" width="1.2126%" height="15" fill="rgb(225,35,8)" fg:x="947" fg:w="28"/><text x="41.2634%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.04%)</title><rect x="42.2261%" y="149" width="0.0433%" height="15" fill="rgb(250,213,24)" fg:x="975" fg:w="1"/><text x="42.4761%" y="159.50"></text></g><g><title>gkr2`prover_research::core::channel::Blake2sChannel::draw_base_felts (832 samples, 36.03%)</title><rect x="6.7129%" y="165" width="36.0329%" height="15" fill="rgb(247,123,22)" fg:x="155" fg:w="832"/><text x="6.9629%" y="175.50">gkr2`prover_research::core::channel::Blake2sChannel::draw_b..</text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.48%)</title><rect x="42.2694%" y="149" width="0.4764%" height="15" fill="rgb(231,138,38)" fg:x="976" fg:w="11"/><text x="42.5194%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.26%)</title><rect x="42.7458%" y="165" width="0.2599%" height="15" fill="rgb(231,145,46)" fg:x="987" fg:w="6"/><text x="42.9958%" y="175.50"></text></g><g><title>gkr2`&lt;prover_research::core::channel::Blake2sChannel as prover_research::core::channel::Channel&gt;::draw_felts (961 samples, 41.62%)</title><rect x="5.3703%" y="197" width="41.6197%" height="15" fill="rgb(251,118,11)" fg:x="124" fg:w="961"/><text x="5.6203%" y="207.50">gkr2`&lt;prover_research::core::channel::Blake2sChannel as prover_resea..</text></g><g><title>gkr2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (961 samples, 41.62%)</title><rect x="5.3703%" y="181" width="41.6197%" height="15" fill="rgb(217,147,25)" fg:x="124" fg:w="961"/><text x="5.6203%" y="191.50">gkr2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter..</text></g><g><title>libsystem_malloc.dylib`free (92 samples, 3.98%)</title><rect x="43.0056%" y="165" width="3.9844%" height="15" fill="rgb(247,81,37)" fg:x="993" fg:w="92"/><text x="43.2556%" y="175.50">libs..</text></g><g><title>gkr2`&lt;prover_research::core::fields::qm31::QM31 as core::ops::arith::Add&gt;::add (1 samples, 0.04%)</title><rect x="46.9900%" y="197" width="0.0433%" height="15" fill="rgb(209,12,38)" fg:x="1085" fg:w="1"/><text x="47.2400%" y="207.50"></text></g><g><title>gkr2`&lt;prover_research::core::fields::qm31::QM31 as core::ops::arith::Mul&gt;::mul (115 samples, 4.98%)</title><rect x="47.0333%" y="197" width="4.9805%" height="15" fill="rgb(227,1,9)" fg:x="1086" fg:w="115"/><text x="47.2833%" y="207.50">gkr2`&lt;..</text></g><g><title>gkr2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.09%)</title><rect x="52.6202%" y="117" width="0.0866%" height="15" fill="rgb(248,47,43)" fg:x="1215" fg:w="2"/><text x="52.8702%" y="127.50"></text></g><g><title>gkr2`&lt;gkr2::q31::FastSecureField as core::ops::arith::Mul&gt;::mul (25 samples, 1.08%)</title><rect x="52.7068%" y="117" width="1.0827%" height="15" fill="rgb(221,10,30)" fg:x="1217" fg:w="25"/><text x="52.9568%" y="127.50"></text></g><g><title>gkr2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.13%)</title><rect x="53.7895%" y="101" width="0.1299%" height="15" fill="rgb(210,229,1)" fg:x="1242" fg:w="3"/><text x="54.0395%" y="111.50"></text></g><g><title>gkr2`&lt;gkr2::q31::FastSecureField as core::ops::arith::Mul&gt;::mul (10 samples, 0.43%)</title><rect x="53.9194%" y="101" width="0.4331%" height="15" fill="rgb(222,148,37)" fg:x="1245" fg:w="10"/><text x="54.1694%" y="111.50"></text></g><g><title>gkr2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="54.3525%" y="85" width="0.0433%" height="15" fill="rgb(234,67,33)" fg:x="1255" fg:w="1"/><text x="54.6025%" y="95.50"></text></g><g><title>gkr2`&lt;gkr2::q31::FastSecureField as core::ops::arith::Mul&gt;::mul (5 samples, 0.22%)</title><rect x="54.3958%" y="85" width="0.2165%" height="15" fill="rgb(247,98,35)" fg:x="1256" fg:w="5"/><text x="54.6458%" y="95.50"></text></g><g><title>gkr2`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="54.6124%" y="69" width="0.0433%" height="15" fill="rgb(247,138,52)" fg:x="1261" fg:w="1"/><text x="54.8624%" y="79.50"></text></g><g><title>gkr2`&lt;gkr2::q31::FastSecureField as core::ops::arith::Mul&gt;::mul (3 samples, 0.13%)</title><rect x="54.6557%" y="69" width="0.1299%" height="15" fill="rgb(213,79,30)" fg:x="1262" fg:w="3"/><text x="54.9057%" y="79.50"></text></g><g><title>gkr2`&lt;gkr2::q31::FastSecureField as core::ops::arith::Mul&gt;::mul (2 samples, 0.09%)</title><rect x="54.7856%" y="53" width="0.0866%" height="15" fill="rgb(246,177,23)" fg:x="1265" fg:w="2"/><text x="55.0356%" y="63.50"></text></g><g><title>gkr2`gkr2::gkr::Oracle::new (54 samples, 2.34%)</title><rect x="52.6202%" y="149" width="2.3387%" height="15" fill="rgb(230,62,27)" fg:x="1215" fg:w="54"/><text x="52.8702%" y="159.50">g..</text></g><g><title>gkr2`gkr2::gkr::c0 (54 samples, 2.34%)</title><rect x="52.6202%" y="133" width="2.3387%" height="15" fill="rgb(216,154,8)" fg:x="1215" fg:w="54"/><text x="52.8702%" y="143.50">g..</text></g><g><title>gkr2`gkr2::gkr::c0 (27 samples, 1.17%)</title><rect x="53.7895%" y="117" width="1.1693%" height="15" fill="rgb(244,35,45)" fg:x="1242" fg:w="27"/><text x="54.0395%" y="127.50"></text></g><g><title>gkr2`gkr2::gkr::c0 (14 samples, 0.61%)</title><rect x="54.3525%" y="101" width="0.6063%" height="15" fill="rgb(251,115,12)" fg:x="1255" fg:w="14"/><text x="54.6025%" y="111.50"></text></g><g><title>gkr2`gkr2::gkr::c0 (8 samples, 0.35%)</title><rect x="54.6124%" y="85" width="0.3465%" height="15" fill="rgb(240,54,50)" fg:x="1261" fg:w="8"/><text x="54.8624%" y="95.50"></text></g><g><title>gkr2`gkr2::gkr::c0 (4 samples, 0.17%)</title><rect x="54.7856%" y="69" width="0.1732%" height="15" fill="rgb(233,84,52)" fg:x="1265" fg:w="4"/><text x="55.0356%" y="79.50"></text></g><g><title>gkr2`gkr2::gkr::c0 (2 samples, 0.09%)</title><rect x="54.8722%" y="53" width="0.0866%" height="15" fill="rgb(207,117,47)" fg:x="1267" fg:w="2"/><text x="55.1222%" y="63.50"></text></g><g><title>gkr2`&lt;gkr2::q31::FastSecureField as core::ops::arith::Mul&gt;::mul (2 samples, 0.09%)</title><rect x="54.8722%" y="37" width="0.0866%" height="15" fill="rgb(249,43,39)" fg:x="1267" fg:w="2"/><text x="55.1222%" y="47.50"></text></g><g><title>gkr2`&lt;gkr2::q31::FastSecureField as core::ops::arith::Mul&gt;::mul (762 samples, 33.00%)</title><rect x="54.9589%" y="133" width="33.0013%" height="15" fill="rgb(209,38,44)" fg:x="1269" fg:w="762"/><text x="55.2089%" y="143.50">gkr2`&lt;gkr2::q31::FastSecureField as core::ops::arith:..</text></g><g><title>gkr2`&lt;gkr2::q31::FastSecureField as core::ops::arith::MulAssign&gt;::mul_assign (22 samples, 0.95%)</title><rect x="87.9602%" y="133" width="0.9528%" height="15" fill="rgb(236,212,23)" fg:x="2031" fg:w="22"/><text x="88.2102%" y="143.50"></text></g><g><title>gkr2`&lt;gkr2::gkr::Oracle as gkr2::sumcheck::SumcheckOracle&gt;::fix_first::_{{closure}} (10 samples, 0.43%)</title><rect x="88.9996%" y="117" width="0.4331%" height="15" fill="rgb(242,79,21)" fg:x="2055" fg:w="10"/><text x="89.2496%" y="127.50"></text></g><g><title>gkr2`fix_first (132 samples, 5.72%)</title><rect x="88.9129%" y="133" width="5.7168%" height="15" fill="rgb(211,96,35)" fg:x="2053" fg:w="132"/><text x="89.1629%" y="143.50">gkr2`fi..</text></g><g><title>gkr2`&lt;gkr2::q31::FastSecureField as core::ops::arith::Mul&gt;::mul (120 samples, 5.20%)</title><rect x="89.4327%" y="117" width="5.1971%" height="15" fill="rgb(253,215,40)" fg:x="2065" fg:w="120"/><text x="89.6827%" y="127.50">gkr2`&lt;..</text></g><g><title>gkr2`&lt;gkr2::q31::FastSecureField as prover_research::core::fields::Field&gt;::inverse (2 samples, 0.09%)</title><rect x="97.6613%" y="117" width="0.0866%" height="15" fill="rgb(211,81,21)" fg:x="2255" fg:w="2"/><text x="97.9113%" y="127.50"></text></g><g><title>gkr2`gkr2::sumcheck::prove (1,000 samples, 43.31%)</title><rect x="54.9589%" y="149" width="43.3088%" height="15" fill="rgb(208,190,38)" fg:x="1269" fg:w="1000"/><text x="55.2089%" y="159.50">gkr2`gkr2::sumcheck::prove</text></g><g><title>gkr2`univariate_sum (84 samples, 3.64%)</title><rect x="94.6297%" y="133" width="3.6379%" height="15" fill="rgb(235,213,38)" fg:x="2185" fg:w="84"/><text x="94.8797%" y="143.50">gkr2..</text></g><g><title>gkr2`gkr2::utils::Polynomial&lt;F&gt;::interpolate_lagrange (12 samples, 0.52%)</title><rect x="97.7479%" y="117" width="0.5197%" height="15" fill="rgb(237,122,38)" fg:x="2257" fg:w="12"/><text x="97.9979%" y="127.50"></text></g><g><title>gkr2`&lt;prover_research::core::fields::qm31::QM31 as core::ops::arith::DivAssign&gt;::div_assign (12 samples, 0.52%)</title><rect x="97.7479%" y="101" width="0.5197%" height="15" fill="rgb(244,218,35)" fg:x="2257" fg:w="12"/><text x="97.9979%" y="111.50"></text></g><g><title>gkr2`prover_research::core::fields::Field::pow (12 samples, 0.52%)</title><rect x="97.7479%" y="85" width="0.5197%" height="15" fill="rgb(240,68,47)" fg:x="2257" fg:w="12"/><text x="97.9979%" y="95.50"></text></g><g><title>gkr2`gkr2::utils::Polynomial&lt;F&gt;::interpolate_lagrange (2 samples, 0.09%)</title><rect x="98.2676%" y="149" width="0.0866%" height="15" fill="rgb(210,16,53)" fg:x="2269" fg:w="2"/><text x="98.5176%" y="159.50"></text></g><g><title>gkr2`&lt;prover_research::core::fields::qm31::QM31 as core::ops::arith::DivAssign&gt;::div_assign (1 samples, 0.04%)</title><rect x="98.3110%" y="133" width="0.0433%" height="15" fill="rgb(235,124,12)" fg:x="2270" fg:w="1"/><text x="98.5610%" y="143.50"></text></g><g><title>gkr2`prover_research::core::fields::Field::pow (1 samples, 0.04%)</title><rect x="98.3110%" y="117" width="0.0433%" height="15" fill="rgb(224,169,11)" fg:x="2270" fg:w="1"/><text x="98.5610%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.09%)</title><rect x="98.3543%" y="149" width="0.0866%" height="15" fill="rgb(250,166,2)" fg:x="2271" fg:w="2"/><text x="98.6043%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.09%)</title><rect x="98.3543%" y="133" width="0.0866%" height="15" fill="rgb(242,216,29)" fg:x="2271" fg:w="2"/><text x="98.6043%" y="143.50"></text></g><g><title>gkr2`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1,074 samples, 46.51%)</title><rect x="52.0139%" y="197" width="46.5136%" height="15" fill="rgb(230,116,27)" fg:x="1201" fg:w="1074"/><text x="52.2639%" y="207.50">gkr2`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFr..</text></g><g><title>gkr2`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,074 samples, 46.51%)</title><rect x="52.0139%" y="181" width="46.5136%" height="15" fill="rgb(228,99,48)" fg:x="1201" fg:w="1074"/><text x="52.2639%" y="191.50">gkr2`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::I..</text></g><g><title>gkr2`gkr2::gkr::prove2::_{{closure}} (1,060 samples, 45.91%)</title><rect x="52.6202%" y="165" width="45.9073%" height="15" fill="rgb(253,11,6)" fg:x="1215" fg:w="1060"/><text x="52.8702%" y="175.50">gkr2`gkr2::gkr::prove2::_{{closure}}</text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.09%)</title><rect x="98.4409%" y="149" width="0.0866%" height="15" fill="rgb(247,143,39)" fg:x="2273" fg:w="2"/><text x="98.6909%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.09%)</title><rect x="98.4409%" y="133" width="0.0866%" height="15" fill="rgb(236,97,10)" fg:x="2273" fg:w="2"/><text x="98.6909%" y="143.50"></text></g><g><title>gkr2`core::iter::traits::iterator::Iterator::unzip (26 samples, 1.13%)</title><rect x="98.5275%" y="197" width="1.1260%" height="15" fill="rgb(233,208,19)" fg:x="2275" fg:w="26"/><text x="98.7775%" y="207.50"></text></g><g><title>gkr2`&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (26 samples, 1.13%)</title><rect x="98.5275%" y="181" width="1.1260%" height="15" fill="rgb(216,164,2)" fg:x="2275" fg:w="26"/><text x="98.7775%" y="191.50"></text></g><g><title>gkr2`std::io::stdio::_print (1 samples, 0.04%)</title><rect x="99.6535%" y="197" width="0.0433%" height="15" fill="rgb(220,129,5)" fg:x="2301" fg:w="1"/><text x="99.9035%" y="207.50"></text></g><g><title>gkr2`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.04%)</title><rect x="99.6535%" y="181" width="0.0433%" height="15" fill="rgb(242,17,10)" fg:x="2301" fg:w="1"/><text x="99.9035%" y="191.50"></text></g><g><title>gkr2`core::fmt::write (1 samples, 0.04%)</title><rect x="99.6535%" y="165" width="0.0433%" height="15" fill="rgb(242,107,0)" fg:x="2301" fg:w="1"/><text x="99.9035%" y="175.50"></text></g><g><title>gkr2`&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.04%)</title><rect x="99.6535%" y="149" width="0.0433%" height="15" fill="rgb(251,28,31)" fg:x="2301" fg:w="1"/><text x="99.9035%" y="159.50"></text></g><g><title>gkr2`&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::_{{closure}} (1 samples, 0.04%)</title><rect x="99.6535%" y="133" width="0.0433%" height="15" fill="rgb(233,223,10)" fg:x="2301" fg:w="1"/><text x="99.9035%" y="143.50"></text></g><g><title>gkr2`core::fmt::write (1 samples, 0.04%)</title><rect x="99.6535%" y="117" width="0.0433%" height="15" fill="rgb(215,21,27)" fg:x="2301" fg:w="1"/><text x="99.9035%" y="127.50"></text></g><g><title>gkr2`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.04%)</title><rect x="99.6535%" y="101" width="0.0433%" height="15" fill="rgb(232,23,21)" fg:x="2301" fg:w="1"/><text x="99.9035%" y="111.50"></text></g><g><title>gkr2`std::rt::lang_start::_{{closure}} (2,304 samples, 99.78%)</title><rect x="0.0000%" y="245" width="99.7835%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="2304"/><text x="0.2500%" y="255.50">gkr2`std::rt::lang_start::_{{closure}}</text></g><g><title>gkr2`std::sys_common::backtrace::__rust_begin_short_backtrace (2,304 samples, 99.78%)</title><rect x="0.0000%" y="229" width="99.7835%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="2304"/><text x="0.2500%" y="239.50">gkr2`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>gkr2`gkr2::main (2,304 samples, 99.78%)</title><rect x="0.0000%" y="213" width="99.7835%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="2304"/><text x="0.2500%" y="223.50">gkr2`gkr2::main</text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.09%)</title><rect x="99.6968%" y="197" width="0.0866%" height="15" fill="rgb(212,68,19)" fg:x="2302" fg:w="2"/><text x="99.9468%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.09%)</title><rect x="99.6968%" y="181" width="0.0866%" height="15" fill="rgb(240,187,13)" fg:x="2302" fg:w="2"/><text x="99.9468%" y="191.50"></text></g><g><title>gkr2`main (2,305 samples, 99.83%)</title><rect x="0.0000%" y="277" width="99.8268%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="2305"/><text x="0.2500%" y="287.50">gkr2`main</text></g><g><title>gkr2`std::rt::lang_start_internal (2,305 samples, 99.83%)</title><rect x="0.0000%" y="261" width="99.8268%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="2305"/><text x="0.2500%" y="271.50">gkr2`std::rt::lang_start_internal</text></g><g><title>libsystem_kernel.dylib`__mprotect (1 samples, 0.04%)</title><rect x="99.7835%" y="245" width="0.0433%" height="15" fill="rgb(241,108,4)" fg:x="2304" fg:w="1"/><text x="100.0335%" y="255.50"></text></g><g><title>dyld`start (2,306 samples, 99.87%)</title><rect x="0.0000%" y="293" width="99.8701%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="2306"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.04%)</title><rect x="99.8268%" y="277" width="0.0433%" height="15" fill="rgb(224,114,35)" fg:x="2305" fg:w="1"/><text x="100.0768%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.04%)</title><rect x="99.8268%" y="261" width="0.0433%" height="15" fill="rgb(245,159,27)" fg:x="2305" fg:w="1"/><text x="100.0768%" y="271.50"></text></g><g><title>all (2,309 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="2309"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.13%)</title><rect x="99.8701%" y="293" width="0.1299%" height="15" fill="rgb(236,23,11)" fg:x="2306" fg:w="3"/><text x="100.1201%" y="303.50"></text></g></svg></svg>